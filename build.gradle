buildscript {
    repositories {
        jcenter()
        gradlePluginPortal()
        maven { url 'http://palantir.bintray.com/releases' }
    }

    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
        classpath 'com.palantir.baseline:gradle-baseline-java:3.35.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:1.24.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.12.3'
        classpath 'com.palantir.sls-packaging:gradle-sls-packaging:4.16.2'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'
    }
}

apply plugin: 'com.palantir.baseline-circleci'
apply plugin: 'com.palantir.baseline-config'

apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.git-version'

allprojects {
    group 'edu.cmu.cs.diamond.hyperfind'
    version gitVersion()

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url 'http://palantir.bintray.com/releases'
        }
        // mavenLocal()
    }

    apply plugin: 'java'
    apply plugin: 'com.palantir.baseline-idea'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    test {
        useJUnitPlatform()
    }
}

// Excluding client from linting for legacy purposes
configure(subprojects.findAll { it.name != 'client' }) {
    apply plugin: 'org.inferred.processors'  // installs the 'processor' configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.baseline-error-prone'
    apply plugin: 'com.palantir.baseline-checkstyle'
    apply plugin: 'com.palantir.baseline-format'
    apply plugin: 'com.palantir.baseline-class-uniqueness'
    apply plugin: 'com.palantir.baseline-reproducibility'
    apply plugin: 'com.palantir.baseline-exact-dependencies'
    apply plugin: 'com.palantir.baseline-release-compatibility'
    apply plugin: 'com.palantir.baseline-testing'

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.errorproneArgs.addAll(
                '-Xep:PreferSafeLoggableExceptions:OFF',
                '-Xep:PreferSafeLoggingPreconditions:OFF',
                '-Xep:Slf4jLogsafeArgs:OFF'
        )

        options.compilerArgs += [
                '-Werror',
                '-Xlint:deprecation',
                '-Xlint:unchecked',
        ]
    }
}
